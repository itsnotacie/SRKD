"""
Main Testing Script

Author: Xiaoyang Wu (xiaoyang.wu.cs@gmail.com)
Please cite our work if the code is helpful to you.
"""

import sys
import os

SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
sys.path.append(os.path.dirname(SCRIPT_DIR))


from pointcept.engines.defaults import (
    default_argument_parser,
    default_config_parser,
    default_setup,
)
from pointcept.engines.test import TESTERS
from pointcept.engines.launch import launch


def main_worker(cfg):
    cfg = default_setup(cfg)
    tester = TESTERS.build(dict(type=cfg.test.type, cfg=cfg))
    tester.test()

def main():

    dataset = "scannet" # {scannet, scannet200, nuscenes}
    config = "CDSegNet" # {CDSegNet, PTv3_CNF}

    weight = f"/root/models/models/{dataset}/{config}/best_model.pth"

    num_gpus = 1
    config_file = f"../configs/{dataset}/{config}_time.py"

    options = {'save_path': f'../exp/{dataset}_test/{config}_time'}

    args = default_argument_parser().parse_args()
    args.config_file = config_file
    args.num_gpus = num_gpus
    args.options = options

    cfg = default_config_parser(args.config_file, args.options)
    cfg.weight = weight
    cfg.num_gpus = num_gpus

    # nG ~ N(nG;0,\tau*I), the input c' = c + nG
    noise_level = None
    cfg.noise_level = noise_level

    # the mode of inference
    '''
        SSI  : Single-Step Inference, semantic labels aregenerated by CN through a single-step iteration in NN.
        MSAI : Multi-Step Average Inference (MSAI),
               MSAI conducts T step iterations in NN and averages T outputs produced by CN.
        MSFI : Multi-Step Final Inference, MSFI is determined by the output from the final iteration of CN.
    '''
    inference_mode = "SSI"
    step = 1
    cfg.inference_mode = inference_mode
    cfg.step = step

    launch(
        main_worker,
        num_gpus_per_machine=args.num_gpus,
        num_machines=args.num_machines,
        machine_rank=args.machine_rank,
        dist_url=args.dist_url,
        cfg=(cfg,),
    )


if __name__ == "__main__":


    os.environ["CUDA_VISIBLE_DEVICES"]="0"
    print(f"GPU : {os.environ['CUDA_VISIBLE_DEVICES']}")
    main()
